ndk=true

ndk.win_download=android-ndk-r4b-windows.zip
ndk.win_bytes=45792835
ndk.win_checksum=e397145e155a639be53ee4b6db8ad511

ndk.mac_download=android-ndk-r4b-darwin-x86.zip
ndk.mac_bytes=50586041
ndk.mac_checksum=41dbd54335fb828ee408eab17103a1b0

ndk.linux_download=android-ndk-r4b-linux-x86.zip
ndk.linux_bytes=49464776
ndk.linux_checksum=2deabcb125c219b34140975b710f00ec

page.title=Android NDK
@jd:body

<h2 id="notes">Revisions</h2>

<p>The sections below provide information and notes about successive releases of
the NDK, as denoted by revision number. </p>

<script type="text/javascript">
function toggleDiv(link) {
  var toggleable = $(link).parent();
  if (toggleable.hasClass("closed")) {
    //$(".toggleme", toggleable).slideDown("fast");
    toggleable.removeClass("closed");
    toggleable.addClass("open");
    $(".toggle-img", toggleable).attr("title", "hide").attr("src", "{@docRoot}assets/images/triangle-opened.png");
  } else {
    //$(".toggleme", toggleable).slideUp("fast");
    toggleable.removeClass("open");
    toggleable.addClass("closed");
    $(".toggle-img", toggleable).attr("title", "show").attr("src", "/assets/images/triangle-closed.png");
  }
  return false;
}
</script>
<style>
.toggleable {
padding: .25em 1em;
}
.toggleme {
  padding: 1em 1em 0 2em;
  line-height:1em;
}
.toggleable a {
  text-decoration:none;
}
.toggleme a {
  text-decoration:underline;
}
.toggleable.closed .toggleme {
  display:none;
}
#jd-content .toggle-img {
  margin:0;
}
</style>

<div class="toggleable open">
  <a href="#" onclick="return toggleDiv(this)">
        <img src="{@docRoot}assets/images/triangle-opened.png" class="toggle-img" height="9px" width="9px" />
Android NDK, Revision 4b</a> <em>(June 2010)</em>
  <div class="toggleme">
<dl>
<dt>NDK r4b notes:</dt>
<dd><p>Includes fixes for several issues in the NDK build and debugging scripts
&mdash; if you are using NDK r4, we recommend downloading the NDK r4b build. For
detailed information the changes in this release, read the CHANGES.TXT document
included in the downloaded NDK package.</p></dd>
</dl>

<dl>
<dt>General notes:</dt>

<dd>
<ul>
<li>Provides a simplified build system through the new <code>ndk-build</code> build
command. </li>
<li>Adds support for easy native debugging of generated machine code on production
devices through the new <code>ndk-gdb</code> command.</li>
<li>Adds a new Android-specific ABI for ARM-based CPU architectures,
<code>armeabi-v7a</code>. The new ABI extends the existing <code>armeabi</code>
ABI to include these CPU instruction set extensions:
<ul>
<li>Thumb-2 instructions</li>
<li>VFP hardware FPU instructions (VFPv3-D16)</li>
<li>Optional support for ARM Advanced SIMD (NEON) GCC intrinsics and VFPv3-D32.
Supported by devices such as Verizon Droid by Motorola, Google Nexus One, and 
others.</li>
</ul>
<li>Adds a new <code>cpufeatures</code> static library (with sources) that lets
your app detect the host device's CPU features at runtime. Specifically,
applications can check for ARMv7-A support, as well as VFPv3-D32 and NEON
support, then provide separate code paths as needed.</li>
<li>Adds a sample application, <code>hello-neon</code>, that illustrates how to 
use the <code>cpufeatures</code> library to check CPU features and then provide
an optimized code path using NEON instrinsics, if 
supported by the CPU.</li>
<li>Lets you generate machine code for either or both of the instruction sets
supported by the NDK. For example, you can build for both ARMv5 and ARMv7-A
architectures at the same time and have everything stored to your application's
final <code>.apk</code>.</li>
<li>To ensure that your applications are available to users only if their
devices are capable of running them, Android Market now filters applications
based on the instruction set information included in your application &mdash; no
action is needed on your part to enable the filtering. Additionally, the Android
system itself also checks your application at install time and allows the
installation to continue only if the application provides a library that is
compiled for the device's CPU architecture.</li>
<li>Adds support for Android 2.2, including a new stable API for accessing
the pixel buffers of {@link android.graphics.Bitmap} objects from native
code.</li>
</ul>
</dd>
</dl>
</div>
</div>

<div class="toggleable closed">
  <a href="#" onclick="return toggleDiv(this)">
        <img src="{@docRoot}assets/images/triangle-closed.png" class="toggle-img" height="9px" width="9px" />
Android NDK, Revision 3</a> <em>(March 2010)</em>
  <div class="toggleme">

<dl>
<dt>General notes:</dt>

<dd>
<ul>
<li>Adds OpenGL ES 2.0 native library support.</li>
<li>Adds a sample application,<code>hello-gl2</code>, that illustrates the use of
OpenGL ES 2.0 vertex and fragment shaders.</li>
<li>The toolchain binaries have been refreshed for this release with GCC 4.4.0, which should generate slightly more compact and efficient machine code than the previous one (4.2.1). The NDK also still provides the 4.2.1 binaries, which you can optionally use to build your machine code.</li>
</ul>
</dd>
</dl>
</div>
</div>

<div class="toggleable closed">
  <a href="#" onclick="return toggleDiv(this)">
        <img src="{@docRoot}assets/images/triangle-closed.png" class="toggle-img" height="9px" width="9px" />
Android NDK, Revision 2</a> <em>(September 2009)</em>
  <div class="toggleme">

<p>Originally released as "Android 1.6 NDK, Release 1".</p>
<dl>
<dt>General notes:</dt>
<dd>
<ul>
<li>Adds OpenGL ES 1.1 native library support.</li>
<li>Adds a sample application, <code>san-angeles</code>, that renders 3D 
graphics through the native OpenGL ES APIs, while managing activity 
lifecycle with a {@link android.opengl.GLSurfaceView} object.
</li>
</ul>
</dd>
</dl>
 </div>
</div>

<div class="toggleable closed">
  <a href="#" onclick="return toggleDiv(this)">
        <img src="{@docRoot}assets/images/triangle-closed.png" class="toggle-img" height="9px" width="9px" />
Android NDK, Revision 1</a> <em>(June 2009)</em>
  <div class="toggleme">

<p>Originally released as "Android 1.5 NDK, Release 1".</p>
<dl>
<dt>General notes:</dt>
<dd>
<ul>
<li>Includes compiler support (GCC) for ARMv5TE instructions, including Thumb-1
instructions. </li>
<li>Includes system headers for stable native APIs, documentation, and sample
applications.</li>
</ul>
</dd>

</dl>
 </div>
</div>


<h2 id="overview">What is the Android NDK?</h2>

<p>The Android NDK is a toolset that lets you embed components that make use
of native code in your Android applications.
</p>

<p>Android applications run in the Dalvik virtual machine. The NDK allows 
you to implement parts of your applications using native-code languages 
such as C and C++. This can provide benefits to certain classes of applications, 
in the form of reuse of existing code and in some cases increased speed.</p>

<p>The NDK provides:</p>

<ul>
<li>A set of tools and build files used to generate native code libraries from C
and C++ sources</li>
<li>A way to embed the corresponding native libraries into an application package
file (<code>.apk</code>) that can be deployed on Android devices</li>
<li>A set of native system headers and libraries that will be supported in all
future versions of the Android platform, starting from Android 1.5 </li>
<li>Documentation, samples, and tutorials</li>
</ul>

<p>The latest release of the NDK supports these ARM instruction sets:</p>
<ul>
<li>ARMv5TE (including Thumb-1 instructions)</li>
<li>ARMv7-A (including Thumb-2 and VFPv3-D16 instructions, with 
optional support for NEON/VFPv3-D32 instructions)</li>
</ul>

<p>Future releases of the NDK will also support:</p>

<ul>
<li>x86 instructions (see CPU-ARCH-ABIS.TXT for more information)</li>
</ul>

<p>ARMv5TE machine code will run on all ARM-based Android devices. ARMv7-A will
run only on devices such as the Verizon Droid or Google Nexus One that have a
compatible CPU. The main difference between the two instruction sets is that
ARMv7-A supports hardware FPU, Thumb-2, and NEON instructions. You can target
either or both of the instruction sets &mdash; ARMv5TE is the default, but
switching to ARMv7-A is as easy as adding a single line to the application's
Application.mk file, without needing to change anything else in the file. You
can also build for both architectures at the same time and have everything
stored in the final <code>.apk</code>. For complete information is provided in the
CPU-ARCH-ABIS.TXT in the NDK package. </p>

<p>The NDK provides stable headers for libc (the C library), libm (the Math
library), OpenGL ES (3D graphics library), the JNI interface, and other
libraries, as listed in the section below.</p>

<p>The NDK will not benefit most applications. As a developer, you will need 
to balance its benefits against its drawbacks; notably, using native code does 
not result in an automatic performance increase, but does always increase 
application complexity. Typical good candidates for the NDK are self-contained,
CPU-intensive operations that don't allocate much memory, such as signal processing,
physics simulation, and so on. Simply re-coding a method to run in C usually does 
not result in a large performance increase. The NDK can, however, can be 
an effective way to reuse a large corpus of existing C/C++ code.</p>

<p>Please note that the NDK <em>does not</em> enable you to develop native-only
applications. Android's primary runtime remains the Dalvik virtual machine.</p>

<h2 id="contents">Contents of the NDK</h2>

<h4>Development tools</h4>

<p>The NDK includes a set of cross-toolchains (compilers, linkers, etc..) that
can generate native ARM binaries on Linux, OS X, and Windows (with Cygwin)
platforms.</p>

<p>It provides a set of system headers for stable native APIs that are
guaranteed to be supported in all later releases of the platform:</p>

<ul>
<li>libc (C library) headers</li>
<li>libm (math library) headers</li>
<li>JNI interface headers</li>
<li>libz (Zlib compression) headers</li>
<li>liblog (Android logging) header</li>
<li>OpenGL ES 1.1 and OpenGL ES 2.0 (3D graphics libraries) headers</li>
<li>libjnigraphics (Pixel buffer access) header (for Android 2.2 and above).</li> 
<li>A Minimal set of headers for C++ support</li>
</ul>

<p>The NDK also provides a build system that lets you work efficiently with your
sources, without having to handle the toolchain/platform/CPU/ABI details. You
create very short build files to describe which sources to compile and which
Android application will use them &mdash; the build system compiles the sources
and places the shared libraries directly in your application project. </p>

<p class="caution"><strong>Important:</strong> With the exception of the
libraries listed above, native system libraries in the Android platform are
<em>not</em> stable and may change in future platform versions.
Your applications should <em>only</em> make use of the stable native system
libraries provided in this NDK. </p>

<h4>Documentation</h4>

<p>The NDK package includes a set of documentation that describes the
capabilities of the NDK and how to use it to create shared libraries for your
Android applications. In this release, the documentation is provided only in the
downloadable NDK package. You can find the documentation in the
<code>&lt;ndk&gt;/docs/</code> directory. Included are these files:</p>

<ul>
<li>INSTALL.TXT &mdash; describes how to install the NDK and configure it for
your host system</li>
<li>OVERVIEW.TXT &mdash; provides an overview of the NDK capabilities and
usage</li>
<li>ANDROID-MK.TXT &mdash; describes the use of the Android.mk file, which
defines the native sources you want to compile</li>
<li>APPLICATION-MK.TXT &mdash; describes the use of the Application.mk file,
which describes the native sources required by your Android application</li>
<li>HOWTO.TXT &mdash; information about common tasks associated with NDK 
development.</li>
<li>SYSTEM-ISSUES.TXT &mdash; known issues in the Android system images 
that you should be aware of, if you are developing using the NDK. </li>
<li>STABLE-APIS.TXT &mdash; a complete list of the stable APIs exposed
by headers in the NDK.</li>
<li>CPU-ARCH-ABIS.TXT &mdash; a description of supported CPU architectures 
and how to target them. </li>
<li>CPU-FEATURES.TXT &mdash; a description of the <code>cpufeatures</code>
static library that lets your application code detect the target device's 
CPU family and the optional features at runtime. 	</li>
<li>CPU-ARM-NEON.TXT &mdash; a description of how to build with optional
ARM NEON / VFPv3-D32 instructions. </li>
<li>CHANGES.TXT &mdash; a complete list of changes to the NDK across all 
releases.</li>
</ul>

<p>Additionally, the package includes detailed information about the "bionic"
C library provided with the Android platform that you should be aware of, if you
are developing using the NDK. You can find the documentation in the 
<code>&lt;ndk&gt;/docs/system/libc/</code> directory:</p>

<ul>
<li>OVERVIEW.TXT &mdash; provides an overview of the "bionic" C library and the 
features it offers.</li>
</ul>

<h4>Sample applications</h4>

<p>The NDK includes sample Android applications that illustrate how to use
native code in your Android applications. For more information, see 
<a href="#samples">Using the Sample Applications</a>.</p>

<h2 id="requirements">System and Software Requirements</h2>

<p>The sections below describe the system and software requirements for using
the Android NDK, as well as platform compatibility considerations that affect
appplications using libraries produced with the NDK. </p>

<h4>The Android SDK</h4>
<ul>
  <li>A complete Android SDK installation (including all dependencies) is
required.</li>
  <li>Android 1.5 SDK or later version is required.</li>
</ul>

<h4>Supported operating systems</h4>
<ul>
  <li>Windows XP (32-bit) or Vista (32- or 64-bit)</li>
  <li>Mac OS X 10.4.8 or later (x86 only)</li>
  <li>Linux (32- or 64-bit, tested on Linux Ubuntu Dapper Drake)</li>
</ul>

<h4>Required development tools</h4>
<ul>
  <li>For all development platforms, GNU Make 3.81 or later is required. Earlier
versions of GNU Make might work but have not been tested.</li>
  <li>A recent version of awk (either GNU Awk or Nawk) is also required.</li>
  <li>For Windows, <a
href="http://www.cygwin.com">Cygwin</a> 1.7 or higher is required. The NDK 
will <em>not</em> work with Cygwin 1.5 installations.</li>
</ul>

<h4>Android platform compatibility</h4>
<ul>
  <li>The native libraries created by the Android NDK can only be used on
devices running the Android 1.5 platform version or later. This is due to 
toolchain and ABI related changes that make the native libraries incompatible
with 1.0 and 1.1 system images.</li>
  <li>For this reason, you should use native libraries produced with the NDK in
applications that are deployable to devices running the Android 1.5 platform
version or later. </li>
  <li>To ensure compatibility, an application using a native library
produced with the NDK <em>must</em> declare a <a
href="{@docRoot}guide/topics/manifest/uses-sdk-element.html"><code>&lt;uses-sdk&gt;</code></a>
element in its manifest file, with an <code>android:minSdkVersion</code> attribute 
value of "3" or higher. For example:

<pre style="margin:1em;">&lt;manifest&gt;
  ...
  &lt;uses-sdk android:minSdkVersion="3" /&gt;
  ...
&lt;/manifest&gt;</pre>
</li>

<li>If you use this NDK to create a native library that uses the
OpenGL ES APIs, the application containing the library can be deployed only to
devices running the minimum platform versions described in the table below.
To ensure compatibility, make sure that your application declares the proper
<code>android:minSdkVersion</code></a> attribute value, as given in the table.</p>

<table style="margin:1em;">
<tr>
<th>OpenGL ES Version Used</th>
<th>Compatible Android Platform(s)</th>
<th>Required uses-sdk Attribute</th>
</tr>
<tr><td>OpenGL ES 1.1</td><td>Android 1.6 and higher</td><td><code>android:minSdkVersion="4"</code></td></tr>
<tr><td>OpenGL ES 2.0</td><td>Android 2.0 and higher</td><td><code>android:minSdkVersion="5"</code></td></tr>
</table>

<p>For more information about API Level and its relationship to Android
platform versions, see <a href="{@docRoot}guide/appendix/api-levels.html">
Android API Levels</a>.</p></li>

<li>Additionally, an application using the OpenGL ES APIs should declare a
<code>&lt;uses-feature&gt;</code> element in its manifest, with an
<code>android:glEsVersion</code> attribute that specifies the minimum OpenGl ES
version required by the application. This ensures that Android Market will show
your application only to users whose devices are capable of supporting your
application. For example: 

<pre style="margin:1em;">&lt;manifest&gt;
  ...
<!-- Declare that the application uses the OpenGL ES 2.0 API and is designed
     to run only on devices that support OpenGL ES 2.0 or higher. -->
  &lt;uses-feature android:glEsVersion="0x00020000" /&gt;
  ...
&lt;/manifest&gt;</pre>

<p>For more information, see the <a
href="{@docRoot}guide/topics/manifest/uses-feature-element.html"><code>&lt;uses-feature&gt;</code></a>
documentation.</p></li>

<li>If you use this NDK to create a native library that uses the API to access
Android {@link android.graphics.Bitmap} pixel buffers, the application
containing the library can be deployed only to devices running Android 2.2 (API
level 8) or higher. To ensure compatibility, make sure that your application
declares <code>&lt;uses-sdk android:minSdkVersion="8" /&gt;</code>attribute
value in its manifest.</li>
</ul>

<h2 id="installing">Installing the NDK</h2>

<p>Installing the NDK on your development computer is straightforward and
involves extracting the NDK from its download package. Unlike previous releases,
there is no need to run a host-setup script.</p>

<p>Before you get started make sure that you have downloaded the latest <a
href="{@docRoot}sdk/index.html">Android SDK</a> and upgraded your applications
and environment as needed. The NDK will not work with older versions of the
Android SDK. Also, take a moment to review the <a href="#requirements">System
and Software Requirements</a> for the NDK, if you haven't already. </p>

<p>To install the NDK, follow these steps:</p>

<ol>
<li>From the table at the top of this page, select the NDK package that is
appropriate for your development computer and download the package.</li>
<li>Uncompress the NDK download package using tools available on your computer.
When uncompressed, the NDK files are contained in a directory called
<code>android-ndk-&lt;version&gt;</code>. You can rename the NDK directory if
necessary and you can move it to any location on your computer. This
documentation refers to the NDK directory as <code>&lt;ndk&gt;</code>.  </li>
</ol>

<p>You are now ready start working with the NDK. </p>

<h2 id="gettingstarted">Getting Started with the NDK</h2>

<p>Once you've installed the NDK successfully, take a few minutes to read the
documentation included in the NDK. You can find the documentation in the
<code>&lt;ndk&gt;/docs/</code> directory. In particular, please read the
OVERVIEW.TXT document completely, so that you understand the intent of the NDK
and how to use it.</p>

<p>If you used a previous version of the NDK, take a moment to review the 
list of NDK changes in the CHANGES.TXT document. </p>

<p>Here's the general outline of how you work with the NDK tools:</p>

<ol>
<li>Place your native sources under
<code>&lt;project&gt;/jni/...</code></li>
<li>Create <code>&lt;project&gt;/jni/Android.mk</code> to
describe your native sources to the NDK build system</li>
<li>Optional: Create <code>&lt;project&gt;/jni/Application.mk</code>.</li>
<li>Build your native code by running the 'ndk-build' script from your projet's directory.
It is located in the top-level NDK directory:

<p><pre>
$ cd &lt;project&gt;
$ &lt;ndk&gt;/ndk-build
</pre></p>

<p>The build tools copy the stripped, shared libraries needed by your
application to the proper location in the application's project directory.</p>
</li>

<li>Finally, compile your application using the SDK tools in the usual way. The
SDK build tools will package the shared libraries in the application's
deployable <code>.apk</code> file. </p></li>

</ol>

<p>For complete information on all of the steps listed above, please see the
documentation included with the NDK package. </p>


<h2 id="samples">Using the Sample Applications</h2>

<p>The NDK includes sample applications that illustrate how to use native
code in your Android applications:</p>

<ul>
<li><code>hello-jni</code> &mdash; a simple application that loads a string from
a native method implemented in a shared library and then displays it in the
application UI. </li>
<li><code>two-libs</code> &mdash; a simple application that loads a shared
library dynamically and calls a native method provided by the library. In this
case, the method is implemented in a static library imported by the shared
library. </li>
<li><code>san-angeles</code> &mdash; a simple application that renders 3D 
graphics through the native OpenGL ES APIs, while managing activity lifecycle 
with a {@link android.opengl.GLSurfaceView} object. </li>
<li><code>hello-gl2</code> &mdash; a simple application that renders a triangle
using OpenGL ES 2.0 vertex and fragment shaders.</li>
<li><code>hello-neon</code> &mdash; a simple application that shows how to use
the <code>cpufeatures</code> library to check CPU capabilities at runtime,
then use NEON intrinsics if supported by the CPU. Specifically, the 
application implements two versions of a tiny benchmark for a FIR filter 
loop, a C version and a NEON-optimized version for devices that support it.</li>
<li><code>bitmap-plasma</code> &mdash; a simple application that demonstrates
how to access the pixel buffers of Android {@link android.graphics.Bitmap}
objects from native code, and uses this to generate an old-school "plasma"
effect. </li>
</ul>

<p>For each sample, the NDK includes the corresponding C source code and the
necessary Android.mk and Application.mk files. There are  located under 
<code>&lt;ndk&gt;/samples/&lt;name&gt;/</code> and their source code can be found under
<code>&lt;ndk&gt;/samples/&lt;name&gt;/jni/</code>. </p>

<p>You can build the shared libraries for the sample apps by going into <code>&lt;ndk&gt;/samples/&lt;name&gt;/</code>
then calling the <code>ndk-build</code> command. The generated shared libraries will be located under
<code>&lt;ndk&gt;/samples/&lt;name&gt;/libs/armeabi/</code> for (ARMv5TE machine code) and/or
<code>&lt;ndk&gt;/samples/&lt;name&gt;/libs/armeabi-v7a/</code> for (ARMv7 machine code).
</p>

<p>Next, build the sample Android applications that use the shared
libraries:</p>

<ul>
<li>If you are developing in Eclipse with ADT, use the New Project Wizard to
create a new Android project for each sample, using the "Import from Existing
Source" option and importing the source from 
<code>&lt;ndk&gt;/apps/&lt;app_name&gt;/project/</code>. Then, set up an AVD, if
necessary, and build/run the application in the emulator. For more information
about creating a new Android project in Eclipse, see <a
href="{@docRoot}guide/developing/eclipse-adt.html">Developing in
Eclipse</a>.</li>
<li>If you are developing with Ant, use the <code>android</code> tool to create
the build file for each of the sample projects at
<code>&lt;ndk&gt;/apps/&lt;app_name&gt;/project/</code>. Then set up an AVD, if
necessary, build your project in the usual way, and run it in the emulator. 
For more information, see <a
href="{@docRoot}guide/developing/other-ide.html">Developing in Other
IDEs</a>.</li>
</ul>

<h2>Discussion Forum and Mailing List</h2>

<p>If you have questions about the NDK or would like to read or contribute to
discussions about it, please visit the <a
href="http://groups.google.com/group/android-ndk">android-ndk</a> group and 
mailing list.</p>



